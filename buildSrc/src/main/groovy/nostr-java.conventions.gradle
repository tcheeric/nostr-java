/*
nostr-java application/library dependencies & configuration file 

gradle project-build tools specific configs can be found in:
    buildSrc/build.gradle
*/

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.adarshr.test-logger'
    id 'org.gradle.test-retry'
}

group = version = rootProject.property("nostr-java.group")
version = rootProject.property("nostr-java.version")
description = rootProject.property("nostr-java.description")

repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
}

////  TODO: commented placeholder as eric may want to provide custom publishing specs
//publishing {
//    publications {
//        nostrjava(MavenPublication) {
//            from components.java
//        }
//    }
//    repositories {
//        someRemoteRepo()
//    }
//}

dependencies {
    def springBootVersion = rootProject.property("nostr-java.springBootVersion")
    def apacheCommonsLang3 = rootProject.property("nostr-java.apacheCommonsLang3")
    def jacksonModuleAfterburner = rootProject.property("nostr-java.jacksonModuleAfterburner")
    def googleGuava = rootProject.property("nostr-java.googleGuava")
    def bouncyCastle = rootProject.property("nostr-java.bouncyCastle")
    def awaitility = rootProject.property("nostr-java.awaitility")
    def lombok = rootProject.property("nostr-java.lombok")
    def logger = rootProject.property("nostr-java.adarshrGradleTestLoggerPlugin")

    implementation 'org.springframework.boot:spring-boot-starter:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-devtools:' + springBootVersion
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure:' + springBootVersion
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:' + springBootVersion

    implementation 'org.springframework.boot:spring-boot-starter-validation:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-websocket:' + springBootVersion

    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:' + jacksonModuleAfterburner
    implementation 'org.bouncycastle:bcprov-jdk18on:' + bouncyCastle

    implementation 'org.apache.commons:commons-lang3:' + apacheCommonsLang3
    implementation 'com.google.guava:guava:' + googleGuava
    implementation 'org.awaitility:awaitility:' + awaitility
    implementation 'org.projectlombok:lombok:' + lombok
    annotationProcessor 'org.awaitility:awaitility:' + awaitility
    annotationProcessor 'org.projectlombok:lombok:' + lombok

    testImplementation 'org.springframework.boot:spring-boot-starter-test:' + springBootVersion
    testImplementation 'org.projectlombok:lombok:' + lombok
    testImplementation 'org.awaitility:awaitility:' + awaitility
    testImplementation 'com.adarshr:gradle-test-logger-plugin:' + logger
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testAnnotationProcessor 'org.projectlombok:lombok:' + lombok
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.test {
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
//    retry {
//        maxRetries.set(1)
////        maxFailures.set(20)
////        failOnPassedAfterRetry.set(false)
////        failOnSkippedAfterRetry.set(true)
//    }
}

tasks.bootJar {
    enabled = false
}

tasks.jar {
    archiveClassifier = ''
}

java.sourceCompatibility = JavaVersion.toVersion(rootProject.property("nostr-java.java-version"))
java.targetCompatibility = JavaVersion.toVersion(rootProject.property("nostr-java.java-version"))
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(rootProject.property("nostr-java.java-version").toString())
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}
